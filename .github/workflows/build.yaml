name: 构建和发布电子书转换器
run-name: ${{ github.actor }} 正在发布电子书转换器 🚀

on:
  push:
    tags:
      - "v*.*.*"  # 版本标签触发
    branches: [ main ]  # 主分支推送触发（用于测试）
  pull_request:
    branches: [ main ]  # PR触发（用于测试）

# 设置工作流权限
permissions:
  contents: write
  id-token: write
  issues: write
  packages: write

jobs:

  # 构建CLI可执行文件
  build-cli:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            goos: windows
            goarch: amd64
            name: windows-amd64
            extension: .exe
          - os: windows-latest
            goos: windows
            goarch: 386
            name: windows-386
            extension: .exe
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            name: linux-amd64
            extension: ""
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            name: linux-arm64
            extension: ""
          - os: ubuntu-latest
            goos: linux
            goarch: loong64
            name: linux-loong64
            extension: ""
          - os: macos-latest
            goos: darwin
            goarch: amd64
            name: darwin-amd64
            extension: ""
          - os: macos-latest
            goos: darwin
            goarch: arm64
            name: darwin-arm64
            extension: ""
          - os: ubuntu-latest
            goos: wasip1
            goarch: wasm
            name: wasm-wasip1
            extension: .wasm

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录
      
      - name: 提取版本号
        id: get_version
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=dev-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi
      
      - name: 设置Go环境
        uses: actions/setup-go@v4
        with:
          go-version: ^1.21
      
      - name: 缓存Go模块
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: 下载KindleGen依赖
        shell: bash
        run: |
          mkdir -p kindlegen
          if [[ "${{ matrix.goos }}" == "darwin" ]]; then
            echo "Skipping KindleGen download for macOS - not available"
          elif [[ "${{ matrix.goos }}" == "windows" ]]; then
            echo "Skipping KindleGen download for Windows - not available"
          fi
          # KindleGen下载链接已失效，暂时跳过下载步骤
          # 如需要KindleGen功能，请手动提供kindlegen可执行文件

      - name: 安装rsrc工具（Windows）
        if: matrix.goos == 'windows'
        run: go install github.com/akavel/rsrc@latest
      
      - name: 生成Windows资源文件
        if: matrix.goos == 'windows'
        shell: bash
        run: |
          rsrc -manifest docs/archived/kaf-cli.exe.manifest -o cmd/cli/rsrc.syso
      
      - name: 构建kaf-cli
        shell: bash
        run: |
          export GOOS=${{ matrix.goos }}
          export GOARCH=${{ matrix.goarch }}
          export CGO_ENABLED=0
          
          # 设置构建标志
          LDFLAGS="-s -w -X main.version=${{ steps.get_version.outputs.VERSION }}"
          
          # 构建CLI
          go build -ldflags "$LDFLAGS" -o kaf-cli_${{ matrix.name }}${{ matrix.extension }} cmd/cli/main.go
          
          # 如果是tag构建，也构建MCP版本
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            go build -ldflags "$LDFLAGS" -o kaf-mcp_${{ matrix.name }}${{ matrix.extension }} cmd/mcp/main.go
          fi
      
      - name: 清理Windows资源文件
        if: matrix.goos == 'windows'
        shell: bash
        run: rm -f cmd/cli/rsrc.syso
      
      - name: 打包可执行文件
        shell: bash
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          
          # 创建发布目录
          mkdir -p release
          
          # 打包CLI
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            7z a release/kaf-cli_${VERSION}_${{ matrix.name }}.zip kaf-cli_${{ matrix.name }}${{ matrix.extension }}
            if [[ "${{ github.ref }}" == refs/tags/* ]]; then
              7z a release/kaf-mcp_${VERSION}_${{ matrix.name }}.zip kaf-mcp_${{ matrix.name }}${{ matrix.extension }}
            fi
          else
            tar -czf release/kaf-cli_${VERSION}_${{ matrix.name }}.tar.gz kaf-cli_${{ matrix.name }}${{ matrix.extension }}
            if [[ "${{ github.ref }}" == refs/tags/* ]]; then
              tar -czf release/kaf-mcp_${VERSION}_${{ matrix.name }}.tar.gz kaf-mcp_${{ matrix.name }}${{ matrix.extension }}
            fi
          fi
      
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: kaf-${{ matrix.name }}
          path: release/*
          retention-days: 7



  # 发布Release
  release:
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    needs: build-cli
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: 整理发布文件
        run: |
          mkdir -p release
          find artifacts -name "*.zip" -o -name "*.tar.gz" | xargs -I {} cp {} release/
      
      - name: 创建Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 构建Web服务
  build-web:
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' || github.ref == 'refs/heads/main'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 提取版本号
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=dev-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi
      
      - name: 设置Go环境
        uses: actions/setup-go@v4
        with:
          go-version: ^1.21
      
      - name: 缓存Go模块
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: 运行测试
        run: go test -v ./...
      
      - name: 构建Web服务
        run: |
          LDFLAGS="-s -w -X main.version=${{ steps.get_version.outputs.VERSION }}"
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "$LDFLAGS" -o ebook-generator cmd/web/main.go
      
      - name: 上传Web构建产物
        uses: actions/upload-artifact@v4
        with:
          name: web-service
          path: ebook-generator
          retention-days: 7

  # 构建Docker镜像
  docker:
    runs-on: ubuntu-latest
    needs: build-web
    if: github.ref_type == 'tag' || github.ref == 'refs/heads/main'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 下载Web服务构建产物
        uses: actions/download-artifact@v4
        with:
          name: web-service
          path: .
      
      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # 注释掉 Docker Hub 推送
      # - name: 登录Docker Hub
      #   if: github.ref_type == 'tag'
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: 登录GitHub Container Registry
        if: github.ref_type == 'tag'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/ebook-generator
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 构建并推送Docker镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref_type == 'tag' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
